// Code generated by counterfeiter. DO NOT EDIT.
package tracingfakes

import (
	"context"
	"sync"

	"go.opentelemetry.io/otel/sdk/export/trace"
)

type FakeSpanSyncer struct {
	ExportSpanStub        func(context.Context, *trace.SpanData)
	exportSpanMutex       sync.RWMutex
	exportSpanArgsForCall []struct {
		arg1 context.Context
		arg2 *trace.SpanData
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpanSyncer) ExportSpan(arg1 context.Context, arg2 *trace.SpanData) {
	fake.exportSpanMutex.Lock()
	fake.exportSpanArgsForCall = append(fake.exportSpanArgsForCall, struct {
		arg1 context.Context
		arg2 *trace.SpanData
	}{arg1, arg2})
	fake.recordInvocation("ExportSpan", []interface{}{arg1, arg2})
	fake.exportSpanMutex.Unlock()
	if fake.ExportSpanStub != nil {
		fake.ExportSpanStub(arg1, arg2)
	}
}

func (fake *FakeSpanSyncer) ExportSpanCallCount() int {
	fake.exportSpanMutex.RLock()
	defer fake.exportSpanMutex.RUnlock()
	return len(fake.exportSpanArgsForCall)
}

func (fake *FakeSpanSyncer) ExportSpanCalls(stub func(context.Context, *trace.SpanData)) {
	fake.exportSpanMutex.Lock()
	defer fake.exportSpanMutex.Unlock()
	fake.ExportSpanStub = stub
}

func (fake *FakeSpanSyncer) ExportSpanArgsForCall(i int) (context.Context, *trace.SpanData) {
	fake.exportSpanMutex.RLock()
	defer fake.exportSpanMutex.RUnlock()
	argsForCall := fake.exportSpanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpanSyncer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportSpanMutex.RLock()
	defer fake.exportSpanMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpanSyncer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ trace.SpanSyncer = new(FakeSpanSyncer)
