---
platform: linux

image_resource:
  type: registry-image
  source: {repository: python}

run:
  path: sh
  args:
  - -c
  - |
    env
    pip install jaeger-client
    python -c "
    import time
    import logging
    import os
    from jaeger_client import Config, SpanContext
    from jaeger_client.codecs import span_context_from_string

    log_level = logging.DEBUG
    logging.getLogger('').handlers = []
    logging.basicConfig(format='%(asctime)s %(message)s', level=log_level)

    config = Config(
        config={
            'sampler': {
                'type': 'const',
                'param': 1,
            },
            'local_agent': {
                'reporting_host': 'jaeger',
                'reporting_port': 6831,
            },
            'logging': True,
        },
        service_name='downstream-service',
        validate=True,
    )
    # this call also sets opentracing.tracer
    tracer = config.initialize_tracer()

    version, trace_id, parent_id, flags = os.environ['TRACEPARENT'].split('-')
    trace_id, span_id, parent_id, flags = span_context_from_string(trace_id + ':' + parent_id + ':' + parent_id + ':' + flags)
    span_context = SpanContext(trace_id=trace_id, span_id=span_id, parent_id=parent_id, flags=flags)
    with tracer.start_span('downstream-operation', child_of=span_context) as span:
        span.log_kv({'event': 'test message', 'life': 42})

    time.sleep(2)   # yield to IOLoop to flush the spans - https://github.com/jaegertracing/jaeger-client-python/issues/50
    tracer.close()  # flush any buffered spans
    "
